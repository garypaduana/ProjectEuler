/*
    Project Euler Solutions
    Copyright (C) 2012-2013, Gary Paduana, gary.paduana@gmail.com
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package com.gp.projecteuler.problems;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

/**
	Pentagonal numbers are generated by the formula, P(n)= n(3n-1)/2. 
	The first ten pentagonal numbers are:
	
	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
	
	It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). 
	However, their difference, 70 - 22 = 48, is not pentagonal.
	
	Find the pair of pentagonal numbers, P(j) and P(k), for which their sum 
	and difference are pentagonal and D = |Pk - Pj| is minimised;
	what is the value of D?
 */
public class Problem044 {

	public static void main(String[] args) {
		
		List<Integer> pentNums = new ArrayList<Integer>();
		Set<Integer> pentNumsSet = new TreeSet<Integer>();
		
		for(int i = 1; i < 3000; i++){
			int pent = i * (3 * i - 1) / 2;
			pentNums.add(pent);
			pentNumsSet.add(pent);
		}

		for(int distance = 1; distance < pentNums.size(); distance++){
			for(int i = 1; i < pentNums.size(); i++){
				// look "distance" forward and back
				if(i + distance > pentNums.size() - 1){
					continue;
				}
				if(pentNumsSet.contains(pentNums.get(i) + pentNums.get(i + distance))){
					if(pentNumsSet.contains(Math.abs(pentNums.get(i) - pentNums.get(i + distance)))){
						System.out.println("Answer: " +  Math.abs(pentNums.get(i) - pentNums.get(i + distance)));
					}
				}
			}
		}
	}
}
