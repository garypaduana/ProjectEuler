/*
    Project Euler Solutions
    Copyright (C) 2012-2013, Gary Paduana, gary.paduana@gmail.com
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package com.gp.projecteuler.problems;

import com.gp.projecteuler.CommonMath;

public class Problem012 {

	/**
	 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * Let us list the factors of the first seven triangle numbers:
		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28
		We can see that 28 is the first triangle number to have over five divisors.
		
		What is the value of the first triangle number to have over five hundred divisors?
	 */
	public static void main(String[] args) {
		
		long num = 1;
		int factorCount = 0;
		
		while(factorCount <= 500){
			factorCount = CommonMath.findFactors(findSum(num)).size();
			System.out.println("num: " + num + ", factor count: " + factorCount);
			num++;
		}
		System.out.println(findSum(num - 1));
	}
	
	public static long findSum(long num){
		long sum = 0;
		for(long i = 1; i < num; i++){
			sum += i;
		}
		return sum;
	}

}
